<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAVAABLNh4AOioVCzop
        Dyo6KRBMPCsVazwrF3o8Kxd6PCsVazopEEw6KQ8qOyoUC0gzFQAlGxAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADsrFQA9LRkBOyoTHjwq
        FWo/LiK2RzY95E8+V/lWRW/9WUh7/1lIe/9VRG79Tj1W+Uc2POQ/LiC2PSsYaj0pFB5BJgcBPigQAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+LBoAPCsZDz0s
        GWhCMSrQUUBg/GRToP9wX8n/dmXd/3dm4v93ZuP/d2bj/3dm4v91Zd3/cF/J/1ZFb/8/MSL8QDUo0Dwp
        FWc8KBUPPCkVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/LBoANyoVADsr
        FyY7KxanQzIx+GRToP92Zd7/eGfl/3dm5P93ZuL/d2bi/3dm4v93ZuL/d2bi/3dm4v94Z+X/bVzA/0hB
        SP9SdY//SFJX+D0tHKY8KRQlPCUSADsuGgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPiwaADgr
        FwA6KxcxRC4hxGo7Rv9aOD7/WEd4/3Ni1P94Z+T/d2bi/3dm4v93ZuL/d2bi/3dm4v93ZuL/d2bi/3dm
        4v92Zd7/U0Nn/1R6lv9hpdz/Tmd5/z8yJMQ8KBQwPScUADwtGgAAAAAAAAAAAAAAAAAAAAAAAAAAAEEk
        GQA8LBkAOioWJkMuIMR8QVj/slOM/6ROfv9mOkP/UkFh/3BgzP94Z+T/d2bi/3dm4v93ZuL/d2bi/3dm
        4v93ZuL/d2bi/3hn5f9hT5b/TFtn/2Ot6f9jq+b/UW+F/z8yJMM8KRQlPSsYADcsHQAAAAAAAAAAAAAA
        AAAAAAAAPCsZADkqFhA/LBundD5Q/7JTjP+2VJD/tlSQ/6xRhv9vPUr/UT9Z/29eyP94Z+T/d2bi/3dm
        4v93ZuL/d2bi/3dm4v93ZuL/eGfk/2xavP9JSFD/YKLX/2Sw7v9jq+b/TmZ4/z0uHKY7KRUPPCwaAAAA
        AAAAAAAAAAAAADwrGwBAMBkAOisXaV83O/irUYX/tlSQ/7VUj/+1VI//tlSQ/65SiP9zPk7/UD5X/3Bf
        yv94Z+T/d2bi/3dm4v93ZuL/d2bi/3dm4v93ZuP/cmHR/01DVv9bkr3/ZLHu/2Sw7v9go9n/SFBT+Dwp
        FGc8LB8APSwZAAAAAAAAAAAAPCwaADgqFh5HLyTQk0lu/7dVkf+1VI//tVSP/7VUj/+1VI//tlSQ/69S
        if9xPUz/UT9d/3Fh0P93ZuT/d2bi/3dm4v93ZuL/d2bi/3dm4v91ZNz/UUFf/1eEpv9lsfD/ZK/s/2Wx
        7/9ZiK7/QDYqzzwoEh49LRkAAAAAAAAAAAA9LBoAOisXa2Y6QvyxU4v/tVSP/7VUj/+1VI//tVSP/7VU
        j/+1VI//tlSQ/61Rh/9rO0f/VENr/3Rj2P93ZuP/d2bi/3dm4v93ZuL/d2bi/3dm5P9WRG//U3iS/2Sx
        7v9kr+z/ZK/t/2Oq5f9KV1/8PCgUaj0tGgAAAAAAPioaADopFwtBLR62jEZn/7dVkf+1VI//tVSP/7VU
        j/+1VI//tVSP/7VUj/+1VI//tlSQ/6lQgv9hOUD/WkqB/3Zl3/93ZuL/d2bi/3dm4v93ZuL/eGfk/1lI
        e/9RboP/ZLDt/2Sv7P9kr+z/ZbHv/1aBov8+MCC1PCkUCz0sGQA9LBoANyoUKlEzLeSlT3//tlSQ/7VU
        j/+1VI//tVSP/7VUj/+1VI//tVSP/7VUj/+1VI//tlSQ/6BNef9WNzz/Y1Oh/3dm5P93ZuL/d2bi/3dm
        4v94Z+T/XEqF/09pff9kr+z/ZK/s/2Sv7P9ksO7/XpzO/0NAOuM8JhAqPiwaAD0sGgA3KhRNYDg8+bJT
        jP+1VI//tVSP/7VUj/+1VI//tVSP/7VUj/+1VI//tVSP/7VUj/+1VI//tlSQ/45HaP9QOUb/bV3B/3hn
        5P93ZuL/d2bi/3hn5P9dS4b/T2d5/2Sv7P9kr+z/ZK/s/2Sv7P9jq+b/SFFW+TsmD0w9LBoAPSwaADor
        F2xuPUr9tVSP/7VUj/+1VI//tVSP/7VUj/+1VI//tVSP/7VUj/+1VI//tVSP/7VUj/+1VI//s1ON/3Y/
        Uf9TQmb/dWTa/3dm4/93ZuL/eGfk/1xKg/9Pan3/ZK/s/2Sv7P9kr+z/ZK/s/2Sv7P9MYG39PCgUaz0s
        GgA9LBoAOywYem89Sv+0VI7/tlSQ/7VUj/+1VI//tVSP/7VUj/+1VI//tVSP/7VUj/+1VI//tVSP/7VU
        j/+2VJD/qVCC/1w4Pv9hUZn/eGbk/3dm4v94Z+T/WUd5/1FvhP9ksO3/ZK/s/2Sv7P9kr+3/Yqrk/0lU
        Wv88KRV6PSwaAD0sGgA8LBl6SDEm/4FCW/+wUor/tlSQ/7VUj/+1VI//tVSP/7VUj/+1VI//tVSP/7VU
        j/+1VI//tVSP/7VUj/+2VJD/j0dp/1A6Sv9wYMz/d2bj/3dm4v9UQ2n/U3qW/2Wx7/9kr+z/ZK/s/2Sx
        7/9Xhqr/PzMm/z0rGXo9LBoAPSwaAD0qF2xFUEr9S1ZV/2o8R/+hTHr/tVSP/7ZUkP+1VI//tVSP/7VU
        j/+1VI//tVSP/7VUj/+1VI//tVSP/7VUj/+xU4v/aDpE/1tLhv94Z+X/dWTa/09AWv9YiKz/ZbHv/2Sv
        7P9kse//XZvL/0pJR/9HMB39PSwaaz0sGgA9LBoAOyQQTUlbWflgtNH/T3d+/1JAP/99QFb/pU5//7VU
        j/+3VZH/tlSQ/7VUj/+1VI//tVSP/7VUj/+1VI//tVSP/7ZVkP+VSW//UDpI/2hYs/9kUqP/SEJL/12a
        yf9ksO7/ZbHv/16czf9KUVX/bUQx/1k6KPk5KhdNPSwaAD0sGwA7JBArREY95GC00f9lyOz/W6S7/01n
        av9UQUH/dT5Q/5ZIbv+rUIX/tFOO/7dVkf+3VZH/tlSQ/7ZUkP+2VJD/tlSQ/61Rh/9XNTX/U0RA/2NT
        S/9LQTX/VoGj/2Ot6v9Zjbb/SktL/3FGM/+VWUX/TzUj4zgqFyo9LBoAPS4aADwqFAw/MiK3V5Ol/2bK
        7/9lyu7/ZMTn/1yowf9QeYH/TVFQ/1g/QP9uPUr/gkFb/5JGa/+dS3b/pk1+/6lPgv+rUIT/ikRk/2ZS
        R//Atan/2M7E/62glP9TT0j/S15r/1BBNv9/TTn/qGNP/4VRPv9ALhy2OSoaCzwrGwAAAAAAPSwbADwo
        FGtLYmP8ZMPm/2XI7f9lyOz/Zcru/2XI7P9ivNz/W6S7/1KFkf9NbHH/Tlla/09MSv9QREL/UkNB/1ND
        Qv9HNiz/l4p9/+jf1v/m3dT/5NvS/3RmV/9dOib/lllF/6tkUP+nYk7/Yj8s/DoqGWo9LRkAAAAAAAAA
        AAA9LBkAOycSH0A5K9BanbL/Zsrv/2XI7P9lyOz/Zcjs/2XJ7f9lyu7/Zsrv/2XH6v9jweL/Ybzc/1+2
        0/9esMv/XrDM/01vdP+KfG7/5d3U/+jf1//d1Mr/bV1N/4hRPv+sZVH/q2VR/4tUQf9GMB7QOSoYHj0s
        GgAAAAAAAAAAAD0rGgA/MRwAPCgVaklYVvhiu9v/Zcnu/2XI7P9lyOz/Zcjs/2XI7P9lyOz/Zcjs/2XJ
        7f9lye3/Zcnt/2XJ7v9mzPH/XKa//1FKPv+bjH//uq6j/4d6bP9iQjD/oV9L/6tlUf+gX0v/Wzsp+Dor
        GWg+LRsAPSwaAAAAAAAAAAAAAAAAADwrGQA7JxMQPi8dqE90e/9kxOf/Zcnt/2XI7P9lyOz/Zcjs/2XI
        7P9lyOz/Zcjs/2XI7P9lye7/Zcru/2G52P9ReYL/QUo0/0RZO/9FTzT/SzYj/5ZZRf+rZVH/p2JO/25F
        Mv8+LRunOioYDz0rGgAAAAAAAAAAAAAAAAAAAAAAPTMXADwqGAA7KRQnPzQlxVJ+if9kxOf/Zcru/2XJ
        7f9lye7/Zcnu/2bK7/9myu//ZMXo/2Cz0P9Vh5b/R1VO/0NcPf9Kmmf/TbF4/0mdav9NSC//mltH/6hj
        T/92STb/Qi8dxDsqGCY7LBkARiYbAAAAAAAAAAAAAAAAAAAAAAAAAAAAOi0XAD4mFQA8KBQxPzQlxVB0
        e/9gtNH/Yrra/2G31v9fsMz/Wp60/1SFk/9MZ2n/RVBC/0NbPf9Hhln/TKx1/02zev9Ns3r/TKpz/0hR
        Nv+GUD3/cEYz/0IvHcQ6KxkxOSsZAD4sGgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOS4WAD4l
        EwA7KRQnPi8eqUNEOvhFSUH/RU9B/0NRPf9DVTz/RGJB/0Z5T/9KmGX/TK11/020ev9Ns3n/TbN6/020
        e/9Lp3H/Q04y/0wyIPhALRuoOioYJjcpGAA/LBoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAD4oFAA8JxQQPCgWaTwrGNFARCr8RnZO/0qZZ/9MrHX/TbR6/020ev9Ns3n/TbJ5/0yu
        dv9LoGz/R4RZ/0JZOvw+NB/ROyoZaToqGBA6KxkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAADwsGgA6Kx0BPCwZHz0rGWs+Mh63QEMq5EJTNvlEY0H9RWxH/0Vr
        R/9EY0H9QlM1+UBCKeQ+MB22PSkYazwpGB47LyABOyoaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApDwgASTkgADwqGAw8JRUrPCUWTTwp
        GGw9Khl6PSoZejwpGGw8JhVNPCUVKj0nGAtNNiEAJA8HAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////gB///AAD//gAAf/wAAD/4AAAf8AAAD+AAAAfgAAAHwAAAA8AA
        AAOAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABwAAAA8AAAAPgAAAH4AAAB/AA
        AA/4AAAf/AAAP/4AAH//AAD//+AH//////8=
</value>
  </data>
</root>